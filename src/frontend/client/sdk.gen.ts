// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import type {
  RobotCreateData,
  RobotCreateErrors,
  RobotCreateResponses,
  RobotListData,
  RobotListResponses,
  UtilitiesHealthData,
  UtilitiesHealthResponses,
} from './types.gen';
import { client } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
};

/**
 * List
 */
export function robotList<ThrowOnError extends boolean = false>(options?: Options<RobotListData, ThrowOnError>) {
  return (options?.client ?? client).get<
    RobotListResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/v1/robot/',
    ...options,
  });
}

/**
 * Create
 */
export function robotCreate<ThrowOnError extends boolean = false>(options: Options<RobotCreateData, ThrowOnError>) {
  return (options.client ?? client).post<
    RobotCreateResponses,
    RobotCreateErrors,
    ThrowOnError
  >({
    url: '/api/v1/robot/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
}

/**
 * Health
 */
export function utilitiesHealth<ThrowOnError extends boolean = false>(options?: Options<UtilitiesHealthData, ThrowOnError>) {
  return (options?.client ?? client).get<
    UtilitiesHealthResponses,
    unknown,
    ThrowOnError
  >({
    url: '/api/health',
    ...options,
  });
}
